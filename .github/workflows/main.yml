name: Java CI with Gradle

on:
  push:
    branches: [ main ] #이벤트 트리거 조건 지정 (push 시 main 브랜치 발생일경우 작업 실행)

jobs: #하나 이상의 작업 정의
  build:  #작업 이름

    runs-on: ubuntu-latest #작업 실행하는 머신의 운영체제

    steps: # 작업을 수행하기 위해 실행되는 단계
      - uses: actions/checkout@v2
      - name: Set up JDK 11 #작업에 대한 이름
        uses: actions/setup-java@v2 # 마켓플레이스 등록된 작업 실행
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew  # 해당 단계 실행시 수행할 명령 지정
      - name: Build with Gradle
        run: ./gradlew build
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}
          docker build -t spring-cicd . 
          docker tag spring-cicd  ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7}

      - name: Configure AWS credentials # aws의 액세스 키와 비밀 액세스 키의 정보를 가지고 인증
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} #액세스 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #비밀 액세스 키
          aws-region: ap-northeast-2 #서버
      - name: Start Session Manager session
        run: aws ssm start-session --target i-01471cc190d68a336 # AWS 세션 매니저를 통해 EC2 연결 (target 옆에 인스턴스 id)
      - name: Deploy to Server # EC2 세션 매니저를 통해 실행하고 싶은 명령어 전송
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: | #이미 server가 실행중이면 종료 후 삭제 -> EC2 인스턴스에 특정 태그 이미지를 pull -> 이미지 생성 -> 8080 포트 통해 접근 실행
          aws ssm send-command \
            --instance-ids i-01471cc190d68a336 \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7}',
              'sudo docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/spring-cicd:${GITHUB_SHA::7} spring-cicd',
              'sudo docker run -d --name server -p 8080:8080 spring-cicd' 
            ]" \
            --output text